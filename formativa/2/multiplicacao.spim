.data 
    newline: .asciiz "\n"
.text 
main:
    addi $v0, $zero, 5 
    syscall
    add $a0, $v0, $zero #a0 = multiplicando (M)

    addi $v0, $zero, 5 
    syscall
    add $a1, $v0, $zero #a1 = multiplicador (Q)

    jal multfac

    addi $v0, $zero, 1 
    mflo $a0
    syscall

    addi $v0, $zero, 4
    la $a0, newline
    syscall

    addi $v0, $zero, 1
    mfhi $a0
    syscall

    addi $v0, $zero, 10 
    syscall #exit 
    

multfac: # M = $a0 Q = $a1 P = hi e lo
    # Contador de negativos -> $t4
    add $t4, $zero, $zero # Negative count
    
    # Verifies first number signal

    slti $t5, $a0, 0 # t5 = 1 se a0 < 0
    beq $t5, $zero, second_test # if positive, go to second test
    addi $t4, $t4, 1 # negatives ++
    addi $sp, $sp, -4 #open stack to store $ra
    sw $ra, 0($sp) # stores ra
    jal convert_positive # $a0 = negative number 
    lw $ra, 0($sp) # retrieves $ra
    addi $sp, $sp, 4 # remove from stack 


    second_test: 
    slti $t5, $a1, 0 # t5 = 1 se a0 < 0
    beq $t5, $zero, start
    addi $t4, $t4, 1 # negatives ++
    addi $sp, $sp, -4 #open stack to store $ra
    sw $ra, 0($sp)
    add $s0, $a0, $zero #backup a0
    add $a0, $a1, $zero #moves a1 to a0, to call the procedure
    jal convert_positive
    add $a1, $a0, $zero 
    add $a0, $s0, $zero
    lw $ra, 0($sp)
    
    addi $sp, $sp, 4   

    start:

    # Inicializa P: HI = $s0 | LO = $s1
    add $s1, $zero, $a1 # P[31...0] = Q
    add $s0, $zero, $zero # P[64...32] = 0

    # Inicializa contador e mÃ¡scaras
    addi $t0, $zero, 0 # contador = 0 (t0)
    addi $t1, $zero, 1 # mask1 = 00...01 (t1)
    sll $t2, $t1, 31 # mask2 = 10...00 = 2^31 (t2) 
    
    # Loop
    loop: 
    # Se o LSB de P for 1, adiciona M ao HI (s0)
    and $t3, $t1, $s1 # t3 = P[0]
    beq $t3, $zero, L2 # if P[0] == 0 goto L1
    add $s0, $s0, $a0 # P[64...32] += M 

    L2:
    and $t3, $s0, $t1 # t3 = HI[0]
    srl $s0, $s0, 1  # srl HI
    srl $s1, $s1, 1 # srl LO
    beq $t3, $zero, L1 # if HI[0] == 0 goto L1
    addu $s1, $s1, $t2 # faz o shift do LSB de P[64...31]
    
    L1:    
    slti $t3, $t0, 31  # t3 = contador < 31
    beq $t3, $zero, fix_signal # if contador >= 33 goto exit 
    addi $t0, $t0, 1 #contador++
    j loop

    fix_signal:
    bne $t1, $t4, exit #If negatives count = 1 => negative, else => positive
    nor $s0, $s0, $s0 # Calculate 2's complement
    nor $s1, $s1, $s1 
    addi $s1, $s1, 1

    
    exit:
    mthi $s0
    mtlo $s1 

    jr $ra     


    convert_positive: #$a0 -> negative number
    addi $a0, $a0, -1 # neg += 1
    nor $a0, $a0, $a0 # neg = ! neg (nega todos bits)
    jr $ra 






    